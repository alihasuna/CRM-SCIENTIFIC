// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  projects  Project[]
}

model Project {
  id           String        @id @default(cuid())
  title        String
  description  String?
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  milestones   Milestone[]
  documents    Document[]
  notes        Note[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Milestone {
  id          String    @id @default(cuid())
  title       String
  description String?
  date        DateTime
  status      String    @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Document {
  id          String    @id @default(cuid())
  title       String
  description String?
  url         String?  // For storing links to external documents
  content     String?  // For storing document content if needed
  type        String   // paper, report, presentation, etc.
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Note {
  id        String    @id @default(cuid())
  content   String
  projectId String
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
